<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kube.noon.feed.repository.mybatis.FeedMyBatisRepository">
    <resultMap id = "feedViewCntByBuildingMap" type = "com.kube.noon.feed.dto.FeedViewCntByBuildingDto">
        <result property = "feedId" column = "feed_id" jdbcType = "NUMERIC"/>
        <result property = "title" column = "title" jdbcType = "VARCHAR"/>
        <result property = "viewCnt" column = "view_cnt" jdbcType = "NUMERIC"/>
    </resultMap>

    <resultMap id = "feedCntByTagMap" type = "com.kube.noon.feed.dto.FeedCntByTagDto">
        <result property = "tagText" column = "tag_text" jdbcType = "VARCHAR"/>
        <result property = "count" column = "count" jdbcType = "NUMERIC"/>
    </resultMap>

    <resultMap id = "feedPopularityMap" type = "com.kube.noon.feed.dto.FeedPopularityDto">
        <result property = "feedId" column = "feed_id" jdbcType = "NUMERIC"/>
        <result property = "title" column = "title" jdbcType = "VARCHAR"/>
        <result property = "writerId" column = "writer_id" jdbcType = "VARCHAR"/>
        <result property = "nickname" column = "nickname" jdbcType = "VARCHAR"/>
        <result property = "popularity" column = "popularity" jdbcType = "NUMERIC"/>
    </resultMap>

    <resultMap id = "memberLikeTagMap" type = "com.kube.noon.feed.dto.MemberLikeTagDto">
        <result property = "memberId" column = "member_id" jdbcType = "VARCHAR"/>
        <result property = "tagText" column = "tag_text" jdbcType = "VARCHAR"/>
        <result property = "tagCount" column = "tag_count" jdbcType = "NUMERIC"/>
    </resultMap>

    <resultMap id="feedSummaryMap" type="com.kube.noon.feed.dto.FeedSummaryDto">
        <result property="feedId" column="feed_id" jdbcType="NUMERIC"/>
        <result property="writerId" column="writer_id" jdbcType="VARCHAR"/>
        <result property="writerNickname" column="nickname" jdbcType="VARCHAR"/>
        <result property="writerProfile" column="profile_photo_url" jdbcType="VARCHAR"/>
        <result property="title" column="title" jdbcType="VARCHAR"/>
        <result property="feedText" column="feed_text" jdbcType="VARCHAR"/>
        <result property="buildingId" column="building_id" jdbcType="NUMERIC"/>
        <result property="buildingName" column="building_name" jdbcType="VARCHAR"/>
        <result property="writtenTime" column="written_time" jdbcType="TIMESTAMP"/>
        <result property="feedCategory" column="feed_category" jdbcType="VARCHAR" javaType="com.kube.noon.common.FeedCategory"/>
        <result property="like" column="like" jdbcType="BOOLEAN"/>
        <result property="bookmark" column="bookmark" jdbcType="BOOLEAN"/>
        <result property="mainActivated" column="main_activated" jdbcType="BOOLEAN"/>
    </resultMap>

    <select id = "getFeedViewCntByBuilding" parameterType = "int" resultMap = "feedViewCntByBuildingMap">
        SELECT feed_id, title, view_cnt from feed  WHERE building_id = #{buildingId} ORDER BY view_cnt desc limit 5;
    </select>

    <select id = "getFeedCntByTag" resultMap = "feedCntByTagMap">
        SELECT r.tag_text, COUNT(*) as count
        FROM
            (SELECT t.tag_text FROM tag t
            INNER JOIN tag_feed tf ON t.tag_id = tf.tag_id
            INNER JOIN feed f ON tf.feed_id = f.feed_id) r
        GROUP BY r.tag_text
        ORDER BY count DESC limit 5;
    </select>

    <select id = "getFeedPopularity" parameterType="int" resultMap = "feedPopularityMap">
        SELECT f.feed_id, f.title, m.profile_photo_url, f.writer_id, m.nickname, f.view_cnt + 3 * COALESCE(like_count, 0) + 5 * COALESCE(bookmark_count, 0) AS popularity
        FROM feed f
                 LEFT JOIN (
            SELECT f.feed_id, COUNT(*) like_count FROM feed f INNER JOIN zzim z ON f.feed_id = z.feed_id WHERE z.zzim_type = 'LIKE' GROUP BY f.feed_id
        ) likes ON f.feed_id = likes.feed_id
                 LEFT JOIN (
            SELECT f.feed_id, COUNT(*) bookmark_count FROM feed f INNER JOIN zzim z ON f.feed_id = z.feed_id WHERE z.zzim_type = 'BOOKMARK' GROUP BY f.feed_id
        ) bookmarks ON f.feed_id = bookmarks.feed_id
                 LEFT JOIN
             members m ON f.writer_id = m.member_id
        WHERE f.building_id = #{buildingId}
        AND f.activated = true
        ORDER BY popularity DESC
        LIMIT 5;
    </select>


    <select id = "getMemberLikeTag" resultMap="memberLikeTagMap">
        SELECT z.member_id, r.tag_text, COUNT(*) as tag_count FROM zzim z
        INNER JOIN
            (SELECT f.feed_id, t.*
             FROM tag t
             INNER JOIN tag_feed f ON f.tag_id = t.tag_id) r
        ON r.feed_id = z.feed_id
        WHERE z.zzim_type = 'LIKE'
        GROUP BY r.tag_text, z.member_id;
    </select>

    <select id = "getAllFeedOrderByPopolarity" resultMap="feedPopularityMap">
        SELECT f.feed_id, f.view_cnt + 3 * COALESCE(like_count, 0) + 5 * COALESCE(bookmark_count, 0) AS popularity
        FROM feed f
                 LEFT JOIN (
            SELECT f.feed_id, COUNT(*) like_count FROM feed f INNER JOIN zzim z ON f.feed_id = z.feed_id WHERE z.zzim_type = 'LIKE' GROUP BY f.feed_id
        ) likes ON f.feed_id = likes.feed_id
                 LEFT JOIN (
            SELECT f.feed_id, COUNT(*) bookmark_count FROM feed f INNER JOIN zzim z ON f.feed_id = z.feed_id WHERE z.zzim_type = 'BOOKMARK' GROUP BY f.feed_id
        ) bookmarks ON f.feed_id = bookmarks.feed_id
                 LEFT JOIN
             members m ON f.writer_id = m.member_id
                 LEFT JOIN
             building b ON f.building_id = b.building_id
        WHERE f.activated = true
        ORDER BY popularity DESC
        LIMIT #{limit} OFFSET #{offset};
    </select>

</mapper>